import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux"; // ğŸ”¹ Pour dispatcher les actions et accÃ©der au store Redux
import { getLessons } from "../../JS/Actions/lesson"; // ğŸ”¹ Action pour rÃ©cupÃ©rer les leÃ§ons
import LessonCard from "../LessonCard/LessonCard"; // ğŸ”¹ Composant enfant pour afficher chaque leÃ§on
import { Spinner, Button } from "react-bootstrap"; // ğŸ”¹ Composants UI Bootstrap
import { useParams, useNavigate } from "react-router-dom"; // ğŸ”¹ Pour rÃ©cupÃ©rer params URL et navigation
import "./LessonList.css"; // ğŸ”¹ Styles spÃ©cifiques au composant

const LessonList = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { courseId } = useParams(); // ğŸ”¹ RÃ©cupÃ¨re l'ID du cours depuis l'URL

  const { listLessons, load } = useSelector((state) => state.lessonReducer); // ğŸ”¹ Liste des leÃ§ons et Ã©tat de chargement
  const listCourses = useSelector((state) => state.courseReducer.listCourses); // ğŸ”¹ Tous les cours
  const user = useSelector((state) => state.userReducer.user); // ğŸ”¹ Utilisateur courant

  // ğŸ”¹ Charger les leÃ§ons Ã  l'affichage du composant ou quand courseId change
  useEffect(() => {
    if (courseId) dispatch(getLessons(courseId));
  }, [dispatch, courseId]);

  // ğŸ”¹ Gestion des cas oÃ¹ les cours ne sont pas encore chargÃ©s
  if (!listCourses || listCourses.length === 0) return <p>Chargement des cours...</p>;
  const course = listCourses.find((c) => c._id === courseId);
  if (!course) return <p>Cours non trouvÃ©...</p>;
  
  // ğŸ”¹ Affichage spinner pendant le chargement
  if (load) return <Spinner animation="border" variant="primary" />;
  
  // ğŸ”¹ Cas oÃ¹ aucune leÃ§on n'existe pour le cours
  if (!listLessons || listLessons.length === 0) return <p>Aucune leÃ§on trouvÃ©e.</p>;

  return (
    <div className="lesson-list-container">
      <div className="lesson-grid">
        {listLessons.map((lesson, index) => {
          // ğŸ”¹ VÃ©rifier si la leÃ§on doit Ãªtre dÃ©sactivÃ©e (sÃ©quentiel)
          const isDisabled =
            index !== 0 && !user.completedLessons?.includes(listLessons[index - 1]._id);

          return (
            <LessonCard
              key={lesson._id}
              lesson={lesson}
              course={course}
              listLessons={listLessons} // âœ… Passer toute la liste pour navigation entre leÃ§ons
              user={user}
              isDisabled={isDisabled} // ğŸ”¹ DÃ©sactive la leÃ§on si la prÃ©cÃ©dente n'est pas complÃ©tÃ©e
            />
          );
        })}
      </div>

      {/* ğŸ”¹ Bouton retour aux cours */}
      <div className="back-button">
        <Button variant="secondary" onClick={() => navigate("/cours")}>
         Back to Courses
        </Button>
      </div>
    </div>
  );
};

export default LessonList;
