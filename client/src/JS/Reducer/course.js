import {
  FAIL_COURSE,
  GET_COURSES,
  GET_COURSE,
  LOAD_COURSE,
  SUCC_COURSE,
  ASSIGN_COURSE,
  UNASSIGN_COURSE_SUCCESS,
  COMPLETE_COURSE,
} from "../ActionsTypes/course";

// Ã‰tat initial du reducer pour les cours
const initialState = {
  listCourses: [],     // Liste de tous les cours
  courseToGet: {},     // Contient un cours spÃ©cifique pour affichage ou Ã©dition
  load: false,         // Indique si une requÃªte est en cours
  error: null,         // Contient un Ã©ventuel message d'erreur
};

const courseReducer = (state = initialState, { type, payload }) => {
  switch (type) {

    // ğŸ”¹ DÃ©but d'une requÃªte pour les cours
    case LOAD_COURSE:
      return { ...state, load: true };

    // ğŸ”¹ SuccÃ¨s gÃ©nÃ©rique d'une requÃªte liÃ©e au cours (pas de payload spÃ©cifique)
    case SUCC_COURSE:
      return { ...state, load: false, error: null };

    // ğŸ”¹ Ã‰chec d'une action sur les cours
    case FAIL_COURSE:
      return { ...state, load: false, error: payload };

    // ğŸ”¹ RÃ©cupÃ©ration de tous les cours
    case GET_COURSES:
      return { ...state, load: false, listCourses: payload };

    // ğŸ”¹ RÃ©cupÃ©ration d'un cours spÃ©cifique
    case GET_COURSE:
      return { ...state, load: false, courseToGet: payload };

    // ğŸ”¹ Assignation ou dÃ©sassignation d'un cours Ã  un utilisateur
    case ASSIGN_COURSE:
    case UNASSIGN_COURSE_SUCCESS:
      return {
        ...state,
        listCourses: state.listCourses.map(course =>
          course._id === payload._id ? payload : course
        ),
        load: false,
        error: null,
      };

    // ğŸ”¹ Marquer un cours comme terminÃ© pour l'utilisateur
    case COMPLETE_COURSE:
      return {
        ...state,
        user: { ...state.user, completedCourses: payload },
      };

    // ğŸ”¹ Cas par dÃ©faut : retourne l'Ã©tat actuel
    default:
      return state;
  }
};

export default courseReducer;
